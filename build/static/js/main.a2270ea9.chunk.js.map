{"version":3,"sources":["Home.js","SurvivalModel.js","SurvivalData.js","SurvivalStatistics.js","SurvivalSummary.js","SurvivalCases.js","Survival.js","App.js","serviceWorker.js","index.js"],"names":["Home","SurvivalModel","class","SurvivalData","SurvivalStatistics","data","React","useMemo","label","axes","primary","type","position","SurvivalSummary","SurvivalCases","Survival","App","className","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2270ea9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Home = () => {\n  return <h2>Welcome to the homepage!</h2>\n};\n\nexport default Home;\n","import React from 'react';\n\nconst SurvivalModel = () => {\n  return (\n    <div class=\"flex-1 bg-gray-100 p-4 mr-2 rounded-md shadow-md\">\n      <h2 class=\"border-b border-gray-500 text-lg font-medium\">Model</h2>\n      <div class=\"flex flex-wrap content-start mt-2 text-base\">\n        <div class=\"w-1/3 font-semibold py-1\">Developed by</div>\n        <div class=\"w-2/3 py-1\">Felix Peters Consulting</div>\n        <div class=\"w-1/3 font-semibold py-1\">Version</div>\n        <div class=\"w-2/3 py-1\">0.1.0</div>\n        <div class=\"w-1/3 font-semibold py-1\">Release date</div>\n        <div class=\"w-2/3 py-1\">2020-07-01</div>\n        <div class=\"w-1/3 font-semibold py-1\">Intended use</div>\n        <div class=\"w-2/3 py-1\">Decision support for survival prognosis</div>\n        <div class=\"w-1/3 font-semibold py-1\">Target group</div>\n        <div class=\"w-2/3 py-1\">Physicians</div>\n        <div class=\"w-1/3 font-semibold py-1\">Task</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Algorithm</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Performance</div>\n        <div class=\"w-2/3 py-1\">AUC X.XX<br/>Precision XX.X%<br/>Recall XX.X%</div>\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalModel;\n","import React from 'react';\n\nconst SurvivalData = () => {\n  return (\n    <div class=\"flex-1 bg-gray-100 p-4 mr-2 rounded-md shadow-md\">\n      <h2 class=\"border-b border-gray-500 text-lg font-medium\">Data</h2>\n      <div class=\"flex flex-wrap content-start mt-2 text-base\">\n        <div class=\"w-1/3 font-semibold py-1\">Data type</div>\n        <div class=\"w-2/3 py-1\">Tabular</div>\n        <div class=\"w-1/3 font-semibold py-1\">Source</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Timeframe</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Size</div>\n        <div class=\"w-2/3 py-1\">XXX training examples<br/>XXX test examples</div>\n        <div class=\"w-1/3 font-semibold py-1\">Features</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Preprocessing</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n        <div class=\"w-1/3 font-semibold py-1\">Privacy implications</div>\n        <div class=\"w-2/3 py-1\">tbd</div>\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalData;\n","import React from 'react';\nimport { Chart } from 'react-charts';\n\nconst SurvivalStatistics = () => {\n  const data = React.useMemo(\n    () => [\n      {\n        label: 'Series 1',\n        data: [\n          [0, 1],\n          [1, 2],\n          [2, 4],\n          [3, 2],\n          [4, 7],\n        ],\n      },\n      {\n        label: 'Series 2',\n        data: [\n          [0, 3],\n          [1, 1],\n          [2, 5],\n          [3, 6],\n          [4, 4],\n        ],\n      },\n    ],\n    []\n  )\n\n  const axes = React.useMemo(\n    () => [\n      { primary: true, type: 'linear', position: 'bottom' },\n      { type: 'linear', position: 'left' },\n    ],\n    []\n  )\n\n  return (\n    <div class=\"flex-1 bg-gray-100 p-4 mr-2 rounded-md shadow-md\">\n      <h2 class=\"border-b border-gray-500 text-lg font-medium\">Statistics</h2>\n      <div class=\"w-56 h-56 mt-2\" >\n        <Chart data={data} axes={axes} />\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalStatistics;\n","import React from 'react';\nimport SurvivalModel from './SurvivalModel';\nimport SurvivalData from './SurvivalData';\nimport SurvivalStatistics from './SurvivalStatistics';\n\nconst SurvivalSummary = () => {\n  return (\n    <div class=\"flex flex-row m-4 items-stretch justify-center text-gray-700\">\n      <SurvivalModel />\n      <SurvivalData />\n      <SurvivalStatistics />\n    </div>\n  );\n};\n\nexport default SurvivalSummary;\n","import React from 'react';\n\nconst SurvivalCases = () => {\n  return (\n    <div class=\"bg-gray-100 p-2 mx-4 mb-4 rounded-md shadow-md\">\n      <h2>Cases</h2>\n    </div>\n  );\n};\n\nexport default SurvivalCases;\n","import React from 'react';\nimport SurvivalSummary from './SurvivalSummary';\nimport SurvivalCases from './SurvivalCases';\n\nconst Survival = () => {\n  return (\n    <div class=\"flex flex-col bg-gray-300\">\n      <div class=\"bg-gray-100 shadow-md\">\n        <h1 class=\"font-semibold text-2xl px-4 py-4\">Example: Survival Analysis</h1>\n      </div>\n      <SurvivalSummary/>\n      <SurvivalCases />\n    </div>\n  );\n};\n\nexport default Survival;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './Home';\nimport Survival from './Survival';\nimport './App.css';\n\nconst App = () => {\n\n  return (\n      <Router>\n        <header class=\"bg-gray-900 flex justify-between items-center px-4 py-3\">\n          <div class=\"text-white text-3xl font-medium\">\n            Explainable AI Repository\n          </div>\n          <nav className=\"flex\">\n            <Link to=\"/\" className=\"text-lg text-white rounded px-2 py-1 hover:bg-gray-800\">Home</Link>\n            <Link to=\"/survival\" className=\"text-lg text-white rounded px-2 py-1 hover:bg-gray-800\">Survival Analysis</Link>\n          </nav>\n        </header>\n        <Switch>\n          <Route path=\"/survival\">\n            <Survival />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        <footer class=\"bg-gray-900 flex justify-between items-center px-4 py-3\">\n          <div class=\"text-white text-sm font-thin\">Social icons</div>\n          <div class=\"text-white text-sm font-thin\">&copy; 2020 by Felix Peters. All rights reserved.</div>\n        </footer>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.generated.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}